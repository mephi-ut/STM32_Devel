////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : input_cascade_drc.vf
// /___/   /\     Timestamp : 07/19/2018 15:57:35
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: /opt/Xilinx/14.7/ISE_DS/ISE/bin/lin64/unwrapped/sch2hdl -intstyle ise -family spartan6 -verilog input_cascade_drc.vf -w /home/trurl/STM32_Devel/FPGA/CNC/step_driver_control/input_cascade.sch
//Design Name: input_cascade
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module COMP8_HXILINX_input_cascade (EQ, A, B);
    

   output EQ;

   input  [7:0] A;
   input  [7:0] B;

   assign EQ = (A==B) ;

endmodule
`timescale 100 ps / 10 ps

module CB16CE_HXILINX_input_cascade(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module SR16CE_HXILINX_input_cascade(Q, C, CE, CLR, SLI) ;
  
   
   output [15:0]      Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              SLI;
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
          Q <= {Q[14:0], SLI};
     end
   
   
endmodule
`timescale 100 ps / 10 ps

module SR8CE_HXILINX_input_cascade(Q, C, CE, CLR, SLI) ;
  
   
   output [7:0]       Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              SLI;
   
   reg    [7:0]       Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 8'b0000_0000;
	else if (CE)
          Q <= {Q[6:0], SLI};
     end
   
   
endmodule
`timescale 100 ps / 10 ps

module CB8CE_HXILINX_input_cascade(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 8'b1111_1111;
   
   output             CEO;
   output [7:0]       Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg   [7:0]        Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 8'b0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module COMP16_HXILINX_input_cascade (EQ, A, B);
    

   output EQ;

   input  [15:0] A;
   input  [15:0] B;

   assign EQ = (A == B) ;

endmodule
`timescale 1ns / 1ps

module input_cascade();

   
   wire [7:0] XLXN_1;
   wire [15:0] XLXN_2;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire [7:0] XLXN_10;
   wire [15:0] XLXN_11;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_18;
   wire XLXN_19;
   
   (* HU_SET = "H_CNT_5" *) 
   CB8CE_HXILINX_input_cascade  H_CNT (.C(XLXN_9), 
                                      .CE(XLXN_8), 
                                      .CLR(XLXN_19), 
                                      .CEO(), 
                                      .Q(XLXN_10[7:0]), 
                                      .TC());
   (* HU_SET = "H_SHIFT_1" *) 
   SR8CE_HXILINX_input_cascade  H_SHIFT (.C(XLXN_16), 
                                        .CE(XLXN_14), 
                                        .CLR(XLXN_18), 
                                        .SLI(XLXN_2[15]), 
                                        .Q(XLXN_1[7:0]));
   (* HU_SET = "L_CNT_4" *) 
   CB16CE_HXILINX_input_cascade  L_CNT (.C(), 
                                       .CE(), 
                                       .CLR(XLXN_19), 
                                       .CEO(XLXN_8), 
                                       .Q(XLXN_11[15:0]), 
                                       .TC(XLXN_9));
   (* HU_SET = "L_SHIFT_0" *) 
   SR16CE_HXILINX_input_cascade  L_SHIFT (.C(XLXN_16), 
                                         .CE(XLXN_14), 
                                         .CLR(XLXN_18), 
                                         .SLI(), 
                                         .Q(XLXN_2[15:0]));
   (* HU_SET = "XLXI_6_2" *) 
   COMP16_HXILINX_input_cascade  XLXI_6 (.A(XLXN_2[15:0]), 
                                        .B(XLXN_11[15:0]), 
                                        .EQ(XLXN_7));
   (* HU_SET = "XLXI_7_3" *) 
   COMP8_HXILINX_input_cascade  XLXI_7 (.A(XLXN_1[7:0]), 
                                       .B(XLXN_10[7:0]), 
                                       .EQ(XLXN_6));
   AND2  XLXI_12 (.I0(XLXN_7), 
                 .I1(XLXN_6), 
                 .O());
endmodule
