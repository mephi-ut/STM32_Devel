////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : distance_module.vf
// /___/   /\     Timestamp : 07/19/2018 20:26:28
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog /home/trurl/STM32_Devel/FPGA/CNC/step_driver_control/distance_module.vf -w /home/trurl/STM32_Devel/FPGA/CNC/step_driver_control/distance_module.sch
//Design Name: distance_module
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module COMP8_HXILINX_distance_module (EQ, A, B);
    

   output EQ;

   input  [7:0] A;
   input  [7:0] B;

   assign EQ = (A==B) ;

endmodule
`timescale 100 ps / 10 ps

module CB16CE_HXILINX_distance_module(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module SR16CE_HXILINX_distance_module(Q, C, CE, CLR, SLI) ;
  
   
   output [15:0]      Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              SLI;
   
   reg    [15:0]      Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
          Q <= {Q[14:0], SLI};
     end
   
   
endmodule
`timescale 100 ps / 10 ps

module SR8CE_HXILINX_distance_module(Q, C, CE, CLR, SLI) ;
  
   
   output [7:0]       Q;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   input              SLI;
   
   reg    [7:0]       Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 8'b0000_0000;
	else if (CE)
          Q <= {Q[6:0], SLI};
     end
   
   
endmodule
`timescale 100 ps / 10 ps

module CB8CE_HXILINX_distance_module(CEO, Q, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 8'b1111_1111;
   
   output             CEO;
   output [7:0]       Q;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg   [7:0]        Q;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 8'b0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = (Q == TERMINAL_COUNT);
   
endmodule
`timescale  100 ps / 10 ps

module COMP16_HXILINX_distance_module (EQ, A, B);
    

   output EQ;

   input  [15:0] A;
   input  [15:0] B;

   assign EQ = (A == B) ;

endmodule
`timescale 1ns / 1ps

module distance_module(COUNT_CLR, 
                       COUNT_EN, 
                       MAIN_TICK, 
                       SET_CLK, 
                       SET_CLR, 
                       SET_DATA, 
                       SET_DATA_E, 
                       DIST_END, 
                       MAIN_TICK_O);

    input COUNT_CLR;
    input COUNT_EN;
    input MAIN_TICK;
    input SET_CLK;
    input SET_CLR;
    input SET_DATA;
    input SET_DATA_E;
   output DIST_END;
   output MAIN_TICK_O;
   
   wire [7:0] XLXN_1;
   wire [15:0] XLXN_2;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire [7:0] XLXN_10;
   wire [15:0] XLXN_11;
   wire XLXN_20;
   wire XLXN_22;
   wire DIST_END_DUMMY;
   
   assign DIST_END = DIST_END_DUMMY;
   (* HU_SET = "H_CNT_21" *) 
   CB8CE_HXILINX_distance_module  H_CNT (.C(MAIN_TICK), 
                                        .CE(XLXN_8), 
                                        .CLR(COUNT_CLR), 
                                        .CEO(), 
                                        .Q(XLXN_10[7:0]), 
                                        .TC());
   (* HU_SET = "H_SHIFT_17" *) 
   SR8CE_HXILINX_distance_module  H_SHIFT (.C(SET_CLK), 
                                          .CE(SET_DATA_E), 
                                          .CLR(SET_CLR), 
                                          .SLI(XLXN_2[15]), 
                                          .Q(XLXN_1[7:0]));
   (* HU_SET = "L_CNT_20" *) 
   CB16CE_HXILINX_distance_module  L_CNT (.C(MAIN_TICK), 
                                         .CE(XLXN_22), 
                                         .CLR(COUNT_CLR), 
                                         .CEO(XLXN_8), 
                                         .Q(XLXN_11[15:0]), 
                                         .TC());
   (* HU_SET = "L_SHIFT_16" *) 
   SR16CE_HXILINX_distance_module  L_SHIFT (.C(SET_CLK), 
                                           .CE(SET_DATA_E), 
                                           .CLR(SET_CLR), 
                                           .SLI(SET_DATA), 
                                           .Q(XLXN_2[15:0]));
   (* HU_SET = "XLXI_6_18" *) 
   COMP16_HXILINX_distance_module  XLXI_6 (.A(XLXN_2[15:0]), 
                                          .B(XLXN_11[15:0]), 
                                          .EQ(XLXN_7));
   (* HU_SET = "XLXI_7_19" *) 
   COMP8_HXILINX_distance_module  XLXI_7 (.A(XLXN_1[7:0]), 
                                         .B(XLXN_10[7:0]), 
                                         .EQ(XLXN_6));
   AND2  XLXI_12 (.I0(XLXN_7), 
                 .I1(XLXN_6), 
                 .O(DIST_END_DUMMY));
   AND2  XLXI_15 (.I0(COUNT_EN), 
                 .I1(XLXN_20), 
                 .O(XLXN_22));
   INV  XLXI_16 (.I(DIST_END_DUMMY), 
                .O(XLXN_20));
   AND2  XLXI_18 (.I0(MAIN_TICK), 
                 .I1(XLXN_20), 
                 .O(MAIN_TICK_O));
endmodule
